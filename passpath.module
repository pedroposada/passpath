<?php

/***********************
 *  DRUPAL HOOKS
 ***********************/

/**
 * Implements hook_menu()
 */
function passpath_menu() {
  $items = array();
  
  $items['admin/config/passpath'] = array(
    'title' => 'Password Protect Paths', 
    'description' => 'Administer password protected paths.', 
    'position' => 'left', 
    'weight' => -30, 
    'page callback' => 'system_admin_menu_block_page', 
    'access arguments' => array('administer paths'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc' 
  );
  $items['admin/config/passpath/manage'] = array(
    'title' => 'Password Protect Paths',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passpath_admin_form'),
    'access arguments' => array('administer paths'),
    'file' => 'passpath.admin.inc',
  );
  $items['admin/config/passpath/manage/features'] = array(
    'title' => 'Password Protect Paths',
    'description' => 'Administer password protected paths.', 
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0, 
  );
  $items['passpath/protected'] = array(
    'title' => 'Protected Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passpath_protect_form'),  
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['passpath/path/autocomplete'] = array(
    'title' => 'Path autocomplete',
    'page callback' => 'passpath_path_autocomplete',
    'access arguments' => array('administer paths'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_permission()
 */
function passpath_permission() {
  return array(
    'administer paths' => array(
      'title' => t('Administer paths and passwords'),
      'description' => t('Add/remove/edit password protected paths.'),
    ),
  );
}

/**
 * Implements hook_theme($existing, $type, $theme, $path)
 */
function passpath_theme($existing, $type, $theme, $path) {
  return array(
    'passpath_admin_form' => array(
      'render element' => 'form',
    ),
  );
}


/**
 * Implements hook_page_delivery_callback_alter()
 */
function passpath_page_delivery_callback_alter(&$callback) {
	$dest = drupal_get_path_alias(current_path());
  $name = "Drupal_visitor_passpath_expire_{$dest}";
  switch (TRUE) {
    case drupal_match_path($dest, "passpath/nojs/protect"): 
      // stop infinite loop
      break;
    case user_is_logged_in():
      // anon users only
      break;
    case (isset($_COOKIE[$name]) && ($_COOKIE[$name] > REQUEST_TIME)): 
      // do not ask for password if expiration time not reached yet.
      break;
    case (isset($_COOKIE[$name]) && ($_COOKIE[$name] < 0)): 
      // do not ask for password if expiration time is 0.
      break;
    case array_key_exists($dest, variable_get('passpath_protected_paths', array())):
      drupal_goto('passpath/protected', array('query' => array('destination' => $dest)));
      break;
  }
  
}

/***********************
 *  MENU CALLBACKS
 ***********************/

/**
 * passpath/path/autocomplete
 */
function passpath_path_autocomplete($string) {
  $matches = array();
  
  if (module_exists('path')) {
    $result = db_select('url_alias', 'ul')
      ->fields('ul', array('alias'))
      ->condition('alias', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();
    foreach ($result as $data) {
      $matches[$data->alias] = check_plain($data->alias);
    }
  }
  
  drupal_json_output($matches);
}

/***********************
 *  THEME HOOKS
 ***********************/
/**
 * theme_passpath_admin_form admin form
 */
function theme_passpath_admin_form($variables) {
  $table_id = 'passpath-form-wrapper-table';
  $output = '';
  $form = $variables['form'];
  $output .= drupal_render($form['help']);
  $rows = $weights = array();
  foreach (element_children($form['tabs']) as $id) {
    $form['tabs'][$id]['weight']['#attributes']['class'] = array('passpath-form-wrapper-weight');
    $rows[] = array(
      'data' => array(
        '', // dargging handle
        drupal_render($form['tabs'][$id]['path']),
        drupal_render($form['tabs'][$id]['pass']),
        drupal_render($form['tabs'][$id]['expire']),
        drupal_render($form['tabs'][$id]['remove']),
        drupal_render($form['tabs'][$id]['weight']),
      ),
      'class' => array('draggable'),
    );
    $weights[] = $form['tabs'][$id]['weight']['#value'];
  }
  // table headers
  $header = array(
    '', // dragging handle
    t('Path'), 
    t('Passphrase'), 
    t('Expires in'), 
    t('Operations'),
    t('Weight'),
  );
  array_multisort($weights, $rows);
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  $output .= drupal_render_children($form);
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'passpath-form-wrapper-weight');
  return $output;
}

/**************************
 *  FORMS
 **************************/

/**
 * password protection form
 */

function passpath_protect_form($form, &$form_state) {
  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Passphrase'),
    '#description' => t('Enter passphrase to be able to access this page.'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );
  
  return $form;
}
function passpath_protect_form_validate(&$form, &$form_state) {
	if (!drupal_strlen($form_state['values']['password'])) {
		form_error($form['password'], t('Password is required'));
	}
  $dest = drupal_get_destination();
	if (array_key_exists($dest['destination'], variable_get('passpath_protected_paths', array()))) {
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
		$paths = variable_get('passpath_protected_paths', array());
    $original->pass = $paths[$dest['destination']]['pass'];
		if ($paths[$dest['destination']]['pass'] != $form_state['values']['password']) {
			form_error($form['password'], t('Wrong passphrase.'));
		}
	}
  else {
    form_set_error('', t('This page is not password protected.'));
    $form = array();
    $form['password'] = array('#markup' => t('Click !here to go back to home page.',array('!here' => l('here',''))));
  }
}
function passpath_protect_form_submit(&$form, &$form_state) {
	$paths = variable_get('passpath_protected_paths', array());
  $dest = drupal_get_destination();
  if ($paths[$dest['destination']]['expire']) {
  	user_cookie_save(array("passpath_expire_{$dest['destination']}" => strtotime("+ {$paths[$dest['destination']]['expire']} hours")));
  } else {
  	user_cookie_save(array("passpath_expire_{$dest['destination']}" => -1));
  }
}
